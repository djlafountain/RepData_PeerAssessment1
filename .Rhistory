list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(makeVector(1:5),y=1:5, mean = mean(1:5))
cachemean(makeVector(1:5),y=1:5, mean = mean(1:5))
makeVector(1:5)
cachemean(makeVector(1:5),y=1:5, mean = mean(1:5))
cachemean(makeVector(1:5),y=1:5, mean = mean(1:5))
V<-makeVector(1:5)
cachemean(V,y=1:5,mean=mean(1:5))
cachemean(V)
makeCacheMatrix <- function(x = matrix()) {
Inv <- NULL
set <- function(y){
x <<- y
Inv <<- NULL
}
get <- function() x
setSolve <- function(inverse) Inv <<- inverse
getSolve <- function() Inv
list(set = set, get = get, setSolve = setSolve, getSolve = getSolve)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
Inv <- x$getSolve()
if(!is.null(Inv)) {
message("getting cached data")
return(Inv)
}
data <- x$get()
Inv <- Solve(data, ...)
x$setSolve(Inv)
Inv
}
X<-matrix(1:4,2,2)
X
makeCacheMatrix(X)
V<-makeCacheMatrix(X)
cacheSolve(V,y=X,inverse = Solve(X))
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
Inv <- x$getSolve()
if(!is.null(Inv)) {
message("getting cached data")
return(Inv)
}
data <- x$get()
Inv <- solve(data, ...)
x$setSolve(Inv)
Inv
}
cachemean(V,y=X,inverse=solve(X))
solve(X)
I = solve(X)
cachemean(V,y=X,inverse = I)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
Inv <- x$getSolve()
if(!is.null(Inv)) {
message("getting cached data")
return(Inv)
}
data <- x$get()
Inv <- solve(data)
x$setSolve(Inv)
Inv
}
cacheSolve(V, y = X, inverse = I)
cacheSolve(V, y = X, inverse = I)
cacheSolve(V,y=X)
cacheSolve(V)
makeCacheMatrix <- function(x = matrix()) {
Inv <- NULL
set <- function(y){
x <<- y
Inv <<- NULL
}
get <- function() x
setsolve <- function(inverse) Inv <<- inverse
getsolve <- function() Inv
list(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
Inv <- x$getsolve()
if(!is.null(Inv)) {
message("getting cached data")
return(Inv)
}
data <- x$get()
Inv <- solve(data)
x$setsolve(Inv)
Inv
}
X<-matrix(1:9,3,3)
makeCacheMatrix(X)
V<-makeCacheMatrix(X)
cacheSolve(V,y=X)
makeCacheMatrix <- function(x = matrix()) {
Inv <- NULL
set <- function(y){
x <<- y
Inv <<- NULL
}
get <- function() x
setsolve <- function(inverse) Inv <<- inverse
getsolve <- function() Inv
list(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
Inv <- x$getsolve()
if(!is.null(Inv)) {
message("getting cached data")
return(Inv)
}
data <- x$get()
Inv <- solve(data)
x$setsolve(Inv)
Inv
}
X<-matrix(1:4,2,2)
V<-makeCacheMatrix(X)
cacheSolve(V,y=X)
cacheSolve(V,y=X)
cacheSolve(V)
makeCacheMatrix <- function(x = matrix()) {
Inv <- NULL
set <- function(y){
x <<- y
Inv <<- NULL
}
get <- function() x
setsolve <- function(inverse) Inv <<- inverse
getsolve <- function() Inv
list(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
Inv <- x$getsolve()
if(!is.null(Inv)) {
message("getting cached data")
return(Inv)
}
data <- x$get()
Inv <- solve(data)
x$setsolve(Inv)
Inv
}
X<-matrix(1:4,2,2)
V<-makeCacheMatrix(X)
cacheSolve(V)
cacheSolve(V)
makeCacheMatrix <- function(x = matrix()) {
Inv <- NULL
set <- function(y){
x <<- y
Inv <<- NULL
}
get <- function() x
setsolve <- function(inverse) Inv <<- inverse
getsolve <- function() Inv
list(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
makeCacheMatrix <- function(x = matrix()) {
Inv <- NULL
set <- function(y){
x <<- y
Inv <<- NULL
}
get <- function() x
setsolve <- function(inverse) Inv <<- inverse
getsolve <- function() Inv
list(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
Inv <- x$getsolve()
if(!is.null(Inv)) {
message("getting cached data")
return(Inv)
}
data <- x$get()
Inv <- solve(data)
x$setsolve(Inv)
Inv
}
X<-matrix(1:4,2,2)
X<-makeCacheMatrix(X)
cacheSolve(X)
V<-makeCacheMatrix(X)
cacheSolve(V)
X<-matrix(1:4,2,2)
V<-makeCacheMatrix(X)
cacheSolve(V)
cacheSolve(V)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
X<-1:7
makeVector(X)
V<-makeVector(X)
cachemean(V)
cachemean(V)
X<-makeVector1:9
X<-makeVector(1:9)
cachemean(X)
cachemean(X)
cachemean(makeVector(1:11))
cachemean(makeVector(1:11))
X<-makeVector(1:11)
cachemean(X)
cachemean(X)
makeCacheMatrix <- function(x = matrix()) {
Inv <- NULL
set <- function(y){
x <<- y
Inv <<- NULL
}
get <- function() x
setsolve <- function(inverse) Inv <<- inverse
getsolve <- function() Inv
list(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
Inv <- x$getsolve()
if(!is.null(Inv)) {
message("getting cached data")
return(Inv)
}
data <- x$get()
Inv <- solve(data)
x$setsolve(Inv)
Inv
}
X<-matrix(2:10,3,3)
V<-makeCacheMatrix(X)
cacheSolve(V)
solve(X)
X<-matrix(3:11,3,3)
solve(X)
X<-matrix(c(1,1,2,3,3,3,1,2,1))
solve(X)
X<-matrix(c(1,1,2,3,3,3,1,2,1),3,3)
solve(X)
V<-makeCacheMatrix(X)
cacheSolve(V)
cacheSolve(V)
library(dplyr)
install.packages("dplyr")
library(dplyr)
DF <- data.frame(id = c("1","1","2","2"), activity = c("a","b","b","b"), meas = 1:4, meas2 = 5:8)
DF
?summarize_each
library(dplyr)
?summarize_each
Grouped <- group_by(DF, id, activity)
Grouped
?group_by
summarize(Grouped, mean = mean(meas))
summarize_each(Grouped, mean)
summarize_each(Grouped, mean = mean)
?summarize_each
as.table(Grouped)
DF %>% group_by(id, activity) %>% summarise_each(funs(mean))
energy <- read.table("household_power_consumption.txt")
library(lattice)
install.packages("ggplot2")
quartz()
setwd("~/Desktop")
setwd("~/Desktop/Reproducible/RepData_PeerAssessment1")
head(activity)
activity <- read.csv("activity.csv")
activity <- transform(activity, date = as.Date(date))
totalsteps <- tapply(activity$steps, activity$date, sum, na.rm = TRUE)
hist(totalsteps,
xlab = "Total steps per day",
main = "Histogram of total steps per day",
col = "blue",
breaks = 10)
mean(totalsteps)
median(totalsteps)
meansteps <- tapply(activity$steps, activity$interval, mean, na.rm = TRUE)
plot(as.numeric(names(meansteps)),meansteps,
main = "Mean number of steps per 5-minute interval",
xlab = "5-minute interval",
ylab = "Mean number of steps",
col = "red",
type = "l")
Max <- max(meansteps)
logical <- meansteps == Max
names(which(logical))
missing <- is.na(activity$steps)
length(which(missing))
activity.split <- split(activity, intervals)
activity.split <- split(activity, interval)
activity.split <- split(activity, activity$interval)
head(activity.split)
activity.isplit <- impute(activity.split, mean)
library(Hmisc)
activity.isplit <- impute(activity.split, mean)
head(activity.isplit)
indices <- which(missing)
head(indices)
class(indices)
activity.imputed <- activity
for(i in seq_along(indices)){
x<- indices[i]
charx <- as.character(x)
mean <- meansteps[charx]
activity.imputed[x,1] <- mean
}
head(activity.imputed)
meansteps["835"]
meansteps[835]
as.vector(meansteps)
as.dataframe(meansteps)
as.data.frame(meansteps)
activity.imputed <- activity
for(i in seq_along(indices)){
x<- indices[i]
meansteps <- as.data.frame(meansteps)
mean <- meansteps[x,1]
activity.imputed[x,1] <- mean
}
head(activity.imputed)
head(meansteps)
head(activity$date)
day <- weekdays(activity$date)
head(day)
str(day)
for(i in seq_along(day)){
if(day[i]=="Saturday"|day[i]=="Sunday"){day[i]<-"weekend"}
else{day[i]<-"weekday"}
}
head(day)
tail(day)
str(day)
day[1000]
day[1100]
tabel(day)
table(day)
activity$day <- day
head(activity)
day <- as.factor(day)
activity$day <- day
str(activity)
day <- as.factor(day)
activity.imputed$day <- day
library(dplyr)
?select
activity.imputed <- select(activity.imputed, day, interval, steps)
activity.panel <- activity.imputed %>% group_by(interval, day) %>% summarize_each(funs(mean))
head(activity.panel)
head(activity.imputed)
logical <- is.na(activity.imputed$steps)
table(logical)
str(activity.imputed)
missing <- is.na(activity$steps)
length(which(missing))
indices <- which(missing)
activity.imputed <- activity
head(indices)
meansteps <- tapply(activity$steps, activity$interval, mean, na.rm = TRUE)
length(meansteps)
str(indices)
meansteps <- as.data.frame(meansteps)
head(meansteps)
tail(meansteps)
meansteps[2355,1]
activity.imputed[2355,1]
meansteps[1]
activity[2,activity$interval]
head(activity.imputed)
meansteps <- tapply(activity$steps, activity$interval, mean, na.rm = TRUE)
head(meansteps)
meansteps[0]
meansteps[5]
?tapply
meansteps <- tapply(activity$steps, activity$interval, mean, na.rm = TRUE, simplify = TRUE)
str(meansteps)
levels(activity$interval)
str(activity)
?levels
activity <- transform(activity, interval = factor(interval))
str(activity)
levels(activity$interval)
meansteps <- as.data.frame(meansteps)
intervals <- levels(activity$interval)
meansteps$interval <- intervals
head(meansteps)
str(meansteps)
head(activity.imputed)
as.character(5)
activity <- read.csv("activity.csv")
activity <- transform(activity, date = as.Date(date))
meansteps <- tapply(activity$steps, activity$interval, mean, na.rm = TRUE)
missing <- is.na(activity$steps)
length(which(missing))
indices <- which(missing)
activity <- transform(activity, interval = factor(interval))
meansteps <- as.data.frame(meansteps)
intervals <- levels(activity$interval)
meansteps$interval <- intervals
activity.imputed <- activity
for(i in seq_along(indices)){
x<- indices[i]
interval <- as.character(activity.imputed[x,3])
for(j in seq_along(meansteps$interval)){
if(interval == meansteps[j,2]){
mean <- meansteps[j,1]
activity.imputed[i,1] <- mean
}
}
}
str(activity.imputed)
logical <- is.na(activity.imputed$steps)
table(logical)
head(activity)
str(activity)
head(meansteps)
tail(meansteps)
str(meansteps)
2304-1728
for(i in seq_along(indices)){
x<- indices[i]
interval <- as.character(activity.imputed[x,3])
yvec <- meansteps$interval
for(j in seq_along(yvec)){
if(interval == meansteps[j,2]){
mean <- meansteps[j,1]
activity.imputed[i,1] <- mean
}
}
print(x)
}
logical <- is.na(activity.imputed$steps)
table(logical)
as.character(2355)
values(logical)
value(logical)
levels(logical)
for(i in seq_along(indices)){
x<- indices[i]
interval <- as.character(activity.imputed[x,3])
yvec <- meansteps$interval
for(j in seq_along(yvec)){
if(interval == meansteps[j,2]){
mean <- meansteps[j,1]
activity.imputed[x,1] <- mean
}
}
}
logical <- is.na(activity.imputed$steps)
table(logical)
day <- weekdays(activity.imputed$date)
for(i in seq_along(day)){
if(day[i]=="Saturday"|day[i]=="Sunday"){day[i]<-"weekend"}
else{day[i]<-"weekday"}
}
day <- as.factor(day)
activity.imputed$day <- day
head(activity.imputed)
activity.imputed <- select(activity.imputed, day, interval, steps)
activity.panel <- activity.imputed %>% group_by(interval, day) %>% summarize_each(funs(mean))
head(activity.panel)
activity.panel <- transform(activity.panel, interval = as.integer(interval))
head(activity.panel)
activity.panel <- activity.imputed %>% group_by(interval, day) %>% summarize_each(funs(mean))
activity.panel$interval <- as.numeric(as.character(activity.pane$interval))
activity.panel$interval <- as.numeric(as.character(activity.panel$interval))
head(activity.panel)
library(lattice)
xyplot(steps ~ interval | day, data = activity.panel, layout = c(1,2))
quartz()
xyplot(steps ~ interval | day, data = activity.panel, layout = c(1,2), type = "l")
xyplot(steps ~ interval | day, data = activity.panel, layout = c(1,2), type = "l", xlab = "5-minute intervals", ylab = "Mean number of daily steps")
xyplot(steps ~ interval | day, data = activity.panel, layout = c(1,2), type = "l", xlab = "5-minute intervals", ylab = "Mean number of steps")
